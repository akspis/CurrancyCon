{"version":3,"sources":["Currancy.jsx","App.js","reportWebVitals.js","index.js"],"names":["Currancy","props","CurrencyOption","selectedCurrency","CurrancyChange","Amount","changeAmount","type","value","onChange","className","map","option","idx","URL","App","fromAmount","toAmount","useState","setCurrencyOption","fromCurrency","setfromCurrency","toCurrency","settoCurrency","exchangeRate","setexchangeRate","setAmount","CurrencyStatus","setCurrencyStatus","useEffect","fetch","then","res","json","info","rates","firstCurrency","Object","keys","base","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAoBgBA,MAlBf,SAAkBC,GAClB,IACGC,EAKCD,EALDC,eACAC,EAICF,EAJDE,iBACAC,EAGCH,EAHDG,eACAC,EAECJ,EAFDI,OACAC,EACCL,EADDK,aAEF,OACE,gCACC,uBAAOC,KAAK,SAASC,MAAOH,EAAQI,SAAUH,EAAcI,UAAU,QACtE,wBAAQF,MAAOL,EAAkBM,SAAUL,EAAgBM,UAAU,MAArE,SACMR,EAAeS,KAAI,SAACC,EAAOC,GAC3B,OAAO,wBAAkBL,MAAOI,EAAzB,SAAkCA,GAArBC,YCXzBC,EAAM,gGAwEGC,MAtEf,WACE,IAQIC,EAAaC,EARjB,EAA4CC,mBAAS,IAArD,mBAAOhB,EAAP,KAAuBiB,EAAvB,KACA,EAAwCD,qBAAxC,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,qBAApC,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAwCL,qBAAxC,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA4BP,mBAAS,GAArC,mBAAOb,EAAP,KAAeqB,EAAf,KACA,EAA4CR,oBAAS,GAArD,mBAAOS,EAAP,KAAuBC,EAAvB,KAuCA,OAnCGD,GACDX,EAAaX,EACbY,EAAWZ,EAASmB,IAEpBP,EAAWZ,EACXW,EAAaX,EAASmB,GAG1BK,qBAAU,WACNC,MAAM,GAAD,OAAIhB,EAAJ,iBAAgBM,EAAhB,oBAAwCE,IAC5CS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAgBS,EAAKC,MAAMb,SAC3C,CAACF,EAAcE,IAEfO,qBAAU,WACJC,MAAMhB,GACLiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAME,EAAgBC,OAAOC,KAAKJ,EAAKC,OAAO,GAC9ChB,EAAkB,CAACe,EAAKK,MAAP,mBAAiBF,OAAOC,KAAKJ,EAAKC,UACnDd,EAAgBa,EAAKK,MACrBhB,EAAca,QAEpB,IAaA,sBAAK1B,UAAY,MAAjB,UACA,oBAAIA,UAAU,OAAd,gCACA,qBAAKA,UAAU,YAAf,SACC,cAAC,EAAD,CACAR,eAAkBA,EAClBC,iBAAmBiB,EACnBhB,eAAkB,SAAAoC,GAAKnB,EAAgBmB,EAAEC,OAAOjC,QAChDH,OAAUW,EACVV,aAnBwB,SAACkC,GAC1Bd,EAAUc,EAAEC,OAAOjC,OACnBoB,GAAkB,QAoBjB,qBAAKlB,UAAU,YAAf,SACA,cAAC,EAAD,CACAR,eAAkBA,EAClBC,iBAAmBmB,EACnBlB,eAAkB,SAAAoC,GAAKjB,EAAciB,EAAEC,OAAOjC,QAC9CH,OAAUY,EACVX,aAvBsB,SAACkC,GACxBd,EAAUc,EAAEC,OAAOjC,OACnBoB,GAAkB,YCpCPc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ba7c87b3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n function Currancy(props) {\r\n const {\r\n    CurrencyOption,\r\n    selectedCurrency,\r\n    CurrancyChange,\r\n    Amount,\r\n    changeAmount\r\n } = props\r\n  return (\r\n    <div >\r\n     <input type='number' value={Amount} onChange={changeAmount} className='inp'/>\r\n     <select value={selectedCurrency} onChange={CurrancyChange} className='sel'>\r\n         { CurrencyOption.map((option,idx) =>{\r\n           return <option key={idx} value={option}>{option}</option>\r\n        }) }\r\n     </select>\r\n    </div>\r\n  )\r\n}export default Currancy","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Currancy from './Currancy'\n\nconst URL = 'http://api.exchangeratesapi.io/v1/latest?access_key=b540c23e50dd9b7640727b8dcd40a15f&format=1'\n\nfunction App() {\n  const [CurrencyOption, setCurrencyOption] = useState([])\n  const [fromCurrency, setfromCurrency] = useState()\n  const [toCurrency, settoCurrency] = useState()\n  const [exchangeRate, setexchangeRate] = useState()\n  const [Amount, setAmount] = useState(1)\n  const [CurrencyStatus, setCurrencyStatus] = useState(true)\n  \n\n  let fromAmount , toAmount\n  if(CurrencyStatus){\n    fromAmount = Amount \n    toAmount = Amount * exchangeRate\n  }else{\n    toAmount = Amount\n    fromAmount = Amount / exchangeRate\n  }\n\nuseEffect(()=>{\n    fetch(`${URL}$base=${fromCurrency}$symbols=${toCurrency}`)\n    .then(res => res.json())\n    .then(info => setexchangeRate(info.rates[toCurrency]))\n},[fromCurrency, toCurrency])\n\n  useEffect(()=>{\n        fetch(URL)\n        .then(res => res.json())\n        .then(info => {\n          const firstCurrency = Object.keys(info.rates)[0]\n          setCurrencyOption([info.base , ...Object.keys(info.rates)])\n          setfromCurrency(info.base)\n          settoCurrency(firstCurrency)\n        })\n  },[])\n\n  const handlefromCurrency = (e) =>{\n    setAmount(e.target.value)\n    setCurrencyStatus(true)\n  }\n\n  const handletoCurrency = (e) =>{\n    setAmount(e.target.value)\n    setCurrencyStatus(false)\n  }\n\n  return (\n    <div className = 'App'>\n    <h2 className='name'>Currency Converter</h2>\n    <div className='currency1'>\n     <Currancy\n     CurrencyOption = {CurrencyOption}\n     selectedCurrency ={fromCurrency}\n     CurrancyChange = {e =>{setfromCurrency(e.target.value)}}\n     Amount = {fromAmount}\n     changeAmount = {handlefromCurrency}\n     />\n     </div>\n     <div className='currency2'>\n     <Currancy \n     CurrencyOption = {CurrencyOption}\n     selectedCurrency ={toCurrency}\n     CurrancyChange = {e =>{settoCurrency(e.target.value)}}\n     Amount = {toAmount}\n     changeAmount = {handletoCurrency}\n     />\n     </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}